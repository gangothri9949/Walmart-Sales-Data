# **Create Database**
CREATE DATABASE IF NOT EXISTS `Walmart Sales Data`;

# **Use Database**
USE `Walmart Sales Data`;

# **Create Table**
CREATE TABLE sales(
    `Invoice ID` VARCHAR(30) NOT NULL PRIMARY KEY,
    `Branch` VARCHAR(5) NOT NULL,
    `City` VARCHAR(30) NOT NULL,
    `Customer type` VARCHAR(30) NOT NULL,
    `Gender` VARCHAR(10) NOT NULL,
    `Product line` VARCHAR(100) NOT NULL,
    `Unit price` DECIMAL(10,2) NOT NULL,
    `Quantity` INT NOT NULL,
    `Tax 5%` FLOAT(6,4) NOT NULL,
    `Total` DECIMAL(12, 4) NOT NULL,
    `Date` DATE NOT NULL,
    `Time` TIME NOT NULL,
    `Payment` VARCHAR(20) NOT NULL,
    `cogs` DECIMAL(10,2) NOT NULL,
    `gross margin percentage` FLOAT(11,9),
    `gross income` DECIMAL(12, 4),
    `Rating` FLOAT(2,1)
);

# **Enable Local Infile (for CSV Import)**
SHOW GLOBAL VARIABLES LIKE 'local_infile';
SET GLOBAL local_infile = 1;

# **Load Data from CSV**
LOAD DATA LOCAL INFILE 'C:/Users/sathish/Downloads/Walmart Sales Data.csv'
INTO TABLE sales
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

---------------------------------------------------
# **Feature Engineering**
---------------------------------------------------

## 1. Time_of_day
ALTER TABLE sales ADD COLUMN time_of_day VARCHAR(20);

UPDATE sales
SET time_of_day = (
    CASE 
        WHEN `Time` BETWEEN '00:00:00' AND '12:00:00' THEN 'Morning'
        WHEN `Time` BETWEEN '12:01:00' AND '16:00:00' THEN 'Afternoon'
        ELSE 'Evening' 
    END
);

## 2. Day_name
ALTER TABLE sales ADD COLUMN day_name VARCHAR(10);

UPDATE sales
SET day_name = DAYNAME(`Date`);

## 3. Month_name
ALTER TABLE sales ADD COLUMN month_name VARCHAR(10);

UPDATE sales
SET month_name = MONTHNAME(`Date`);

---------------------------------------------------
# **Exploratory Data Analysis (EDA)**
---------------------------------------------------

## **Generic Questions**
-- 1. How many distinct cities are present?
SELECT DISTINCT `City` FROM sales;

-- 2. Which city is each branch located in?
SELECT DISTINCT `Branch`, `City` FROM sales;

---------------------------------------------------
## **Product Analysis**
---------------------------------------------------

-- 1. How many distinct product lines?
SELECT COUNT(DISTINCT `Product line`) AS distinct_product_lines FROM sales;

-- 2. Most common payment method
SELECT `Payment`, COUNT(*) AS total
FROM sales
GROUP BY `Payment`
ORDER BY total DESC
LIMIT 1;

-- 3. Most selling product line
SELECT `Product line`, COUNT(*) AS total
FROM sales
GROUP BY `Product line`
ORDER BY total DESC
LIMIT 1;

-- 4. Total revenue by month
SELECT month_name, SUM(`Total`) AS total_revenue
FROM sales
GROUP BY month_name
ORDER BY total_revenue DESC;

-- 5. Highest COGS by month
SELECT month_name, SUM(`cogs`) AS total_cogs
FROM sales
GROUP BY month_name
ORDER BY total_cogs DESC;

-- 6. Product line with highest revenue
SELECT `Product line`, SUM(`Total`) AS total_revenue
FROM sales
GROUP BY `Product line`
ORDER BY total_revenue DESC
LIMIT 1;

-- 7. City with highest revenue
SELECT `City`, SUM(`Total`) AS total_revenue
FROM sales
GROUP BY `City`
ORDER BY total_revenue DESC
LIMIT 1;

-- 8. Product line with highest VAT
SELECT `Product line`, SUM(`Tax 5%`) AS total_vat
FROM sales
GROUP BY `Product line`
ORDER BY total_vat DESC
LIMIT 1;

-- 9. Categorize product lines as Good/Bad based on average sales
ALTER TABLE sales ADD COLUMN product_category VARCHAR(20);

UPDATE sales
SET product_category = (
    CASE 
        WHEN `Total` >= (SELECT AVG(`Total`) FROM sales) THEN 'Good'
        ELSE 'Bad'
    END
);

-- 10. Branches selling more than average quantity
SELECT `Branch`, SUM(`Quantity`) AS total_quantity
FROM sales
GROUP BY `Branch`
HAVING total_quantity > (SELECT AVG(`Quantity`) FROM sales);

-- 11. Most common product line by gender
SELECT `Gender`, `Product line`, COUNT(*) AS total
FROM sales
GROUP BY `Gender`, `Product line`
ORDER BY total DESC;

-- 12. Average rating per product line
SELECT `Product line`, ROUND(AVG(`Rating`),2) AS avg_rating
FROM sales
GROUP BY `Product line`
ORDER BY avg_rating DESC;

---------------------------------------------------
## **Sales Analysis**
---------------------------------------------------

-- 1. Sales per time of day (weekdays only)
SELECT day_name, time_of_day, COUNT(*) AS total_sales
FROM sales
WHERE day_name NOT IN ('Saturday','Sunday')
GROUP BY day_name, time_of_day;

-- 2. Customer type with highest revenue
SELECT `Customer type`, SUM(`Total`) AS total_revenue
FROM sales
GROUP BY `Customer type`
ORDER BY total_revenue DESC
LIMIT 1;

-- 3. City with highest VAT
SELECT `City`, SUM(`Tax 5%`) AS total_vat
FROM sales
GROUP BY `City`
ORDER BY total_vat DESC
LIMIT 1;

-- 4. Customer type paying most VAT
SELECT `Customer type`, SUM(`Tax 5%`) AS total_vat
FROM sales
GROUP BY `Customer type`
ORDER BY total_vat DESC
LIMIT 1;

---------------------------------------------------
## **Customer Analysis**
---------------------------------------------------

-- 1. Number of unique customer types
SELECT COUNT(DISTINCT `Customer type`) FROM sales;

-- 2. Number of unique payment methods
SELECT COUNT(DISTINCT `Payment`) FROM sales;

-- 3. Most common customer type
SELECT `Customer type`, COUNT(*) AS total
FROM sales
GROUP BY `Customer type`
ORDER BY total DESC
LIMIT 1;

-- 4. Customer type buying the most
SELECT `Customer type`, SUM(`Total`) AS total_spent
FROM sales
GROUP BY `Customer type`
ORDER BY total_spent DESC
LIMIT 1;

-- 5. Gender distribution
SELECT `Gender`, COUNT(*) AS total
FROM sales
GROUP BY `Gender`
ORDER BY total DESC;

-- 6. Gender distribution per branch
SELECT `Branch`, `Gender`, COUNT(*) AS total
FROM sales
GROUP BY `Branch`, `Gender`
ORDER BY `Branch`;

-- 7. Time of day with most ratings
SELECT time_of_day, AVG(`Rating`) AS avg_rating
FROM sales
GROUP BY time_of_day
ORDER BY avg_rating DESC
LIMIT 1;

-- 8. Time of day with highest ratings per branch
SELECT `Branch`, time_of_day, AVG(`Rating`) AS avg_rating
FROM sales
GROUP BY `Branch`, time_of_day
ORDER BY avg_rating DESC;

-- 9. Day of week with best avg rating
SELECT day_name, AVG(`Rating`) AS avg_rating
FROM sales
GROUP BY day_name
ORDER BY avg_rating DESC
LIMIT 1;

-- 10. Best avg ratings per branch by weekday
SELECT `Branch`, day_name, AVG(`Rating`) AS avg_rating
FROM sales
GROUP BY `Branch`, day_name
ORDER BY avg_rating DESC;
